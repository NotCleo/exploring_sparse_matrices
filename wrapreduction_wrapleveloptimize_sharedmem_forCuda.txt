//x is loaded into shared memory (shared_x) to reduce global memory accesses.
//extern __shared__ double shared_x[];
//for (int i = tid; i < COLS; i += blockDim.x) {
//    shared_x[i] = x[i];
//}
//__syncthreads();

//Used __shfl_down_sync to sum partial results within the thread group.
//int row = blockIdx.x * (blockDim.x / THREADS_PER_ROW) + (threadIdx.x / THREADS_PER_ROW);
//int lane = threadIdx.x % THREADS_PER_ROW;
//for (int j = start + lane; j < end; j += THREADS_PER_ROW) {
//    sum += val[j] * shared_x[col_idx[j]];
//}

//Each row is processed by THREADS_PER_ROW (8) threads, dividing non-zeros among them.
//for (int offset = THREADS_PER_ROW / 2; offset > 0; offset /= 2) {
//    sum += __shfl_down_sync(0xFFFFFFFF, sum, offset, THREADS_PER_ROW);
//}
